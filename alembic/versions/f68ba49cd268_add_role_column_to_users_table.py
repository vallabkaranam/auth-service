"""add role column to users table

Revision ID: f68ba49cd268
Revises: 1accd000d59a
Create Date: 2025-06-04 11:42:59.461999

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f68ba49cd268'
down_revision: Union[str, None] = '1accd000d59a' # This should be the ID of your previous migration
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Define the Enum type object here.
# The values 'ADMIN', 'USER' should match your Python UserRole enum.
user_role_enum = sa.Enum('ADMIN', 'USER', name='userrole')


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Create the PostgreSQL ENUM type
    # The 'checkfirst=True' argument makes this operation idempotent.
    user_role_enum.create(op.get_bind(), checkfirst=True)

    # Step 2: Now add the column using the created ENUM type
    op.add_column('users', sa.Column('role', user_role_enum, nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Drop the column (reverse order of upgrade)
    op.drop_column('users', 'role')

    # Step 2: Drop the PostgreSQL ENUM type
    # The 'checkfirst=True' argument makes this operation idempotent.
    user_role_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###